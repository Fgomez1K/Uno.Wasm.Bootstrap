parameters:
  jobName: ''
  linux_container: ''
  linux_vmImage: 'ubuntu-latest'
  netcore_version: ''

jobs:
- job: ${{ parameters.jobName }}

  container: ${{ parameters.linux_container }}

  workspace:
    clean: all
      
  pool:
    vmImage: ${{ parameters.linux_vmImage }}

  variables:
    NUGET_PACKAGES: $(build.sourcesdirectory)/.nuget
    EMSCRIPTEN_VERSION: 1.40.0
    NETCORE_VERSION: ${{ parameters.netcore_version }}

  steps:
  - checkout: self
    clean: true

  - template: build/ci/gitversion.yml

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    condition: ne(variables['NETCORE_VERSION'], '2.2.x')
    inputs:
      packageType: sdk
      version: ${{ parameters.netcore_version }}
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: UseDotNet@2
    displayName: 'Install .NET 5 SDK'
    inputs:
      packageType: sdk
      version: 5.0.100-rc.2.20479.15
      includePreviewVersions: true
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: 4.9.1
      checkLatest: false

  - bash: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Sample
      dotnet msbuild /r /p:Configuration=Release || true # expected failure (nuget restore does not provide the packager a proper TargetFramework support)
      dotnet msbuild /r /p:Configuration=Release || true # expected failure (nuget restore does not provide the iltrim a proper TargetFramework support)
      dotnet msbuild /r /p:Configuration=Release -m:1
    displayName: Build Mono Sample

  - bash: |
      cd $(build.sourcesdirectory)/src
      dotnet msbuild /r /p:Configuration=Release /t:Publish /m:1 Uno.Wasm.Bootstrap-netcore-only.slnf /bl:$(build.artifactstagingdirectory)/SampleNet5.binlog
    displayName: Build NetCore-Wasm Sample

  - task: CopyFiles@2
    inputs:
      SourceFolder: $(build.sourcesdirectory)/src/Uno.Wasm.AotTests/bin/Release/netstandard2.0/publish
      Contents: '**/*.*'
      TargetFolder: $(build.artifactstagingdirectory)
      CleanTargetFolder: false
      OverWrite: false
      flattenFolders: false

  - bash: rm -fr ~/emsdk
    displayName: Cleanup Emscripten folder to run tests

  - bash: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.AotTests/bin/Release/netstandard2.0/dist
      python server.py &
      cd $(build.sourcesdirectory)/src/WasmAot.UITests
      npm install
      node app

    displayName: Raytracer UI Tests 

  - bash: |
      sed -i "s/8000/8001/g" "$(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Aot/bin/Release/netstandard2.0/dist/server.py"
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Aot/bin/Release/netstandard2.0/dist
      python server.py &
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Aot.UITests
      npm install
      node app

    displayName: StaticLinking.Aot Tests 

  - bash: |
      sed -i "s/8000/8002/g" "$(build.sourcesdirectory)/src/Uno.Wasm.Threads/bin/Release/netstandard2.0/dist/server.py"
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Threads/bin/Release/netstandard2.0/dist
      python server.py &
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Threading.UITests
      npm install
      node app

    displayName: Threading Tests 

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uno-wasm-bootstrap-linux-aot
      ArtifactType: Container
