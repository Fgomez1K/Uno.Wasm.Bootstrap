<Project>

	<PropertyGroup>
		<_packageBinaryPath>$(MSBuildThisFileDirectory)../tools/Uno.Wasm.Bootstrap.v0.dll</_packageBinaryPath>

		<WasmShellTasksPath Condition="!Exists('$(_packageBinaryPath)')">$(MSBuildThisFileDirectory)../bin/$(Configuration)/netstandard2.0</WasmShellTasksPath>
		<WasmShellTasksPath Condition="Exists('$(_packageBinaryPath)')">../tools</WasmShellTasksPath>

		<WasmShellIndexHtmlPath Condition="!Exists('$(_packageBinaryPath)')">$(MSBuildThisFileDirectory)../Templates/index.html</WasmShellIndexHtmlPath>
		<WasmShellIndexHtmlPath Condition="Exists('$(_packageBinaryPath)') and '$(WasmShellIndexHtmlPath)'==''">$(MSBuildThisFileDirectory)../tools/templates/index.html</WasmShellIndexHtmlPath>

		<MonoWasmRuntimeConfiguration Condition="'$(WasmRuntimeConfiguration)'==''">release</MonoWasmRuntimeConfiguration>
		<MonoRuntimeDebuggerEnabled Condition="'$(MonoRuntimeDebuggerEnabled)'==''">false</MonoRuntimeDebuggerEnabled>
    
    <!--
    Set this variable to use custom debugger binaries instead of the files found 
    in the active mono-wasm folder.
    -->
    <MonoRuntimeCustomDebuggerPath>$(MSBuildThisFileDirectory)/CustomDebuggerProxy</MonoRuntimeCustomDebuggerPath>

		<WasmShellEnableAOT Condition="'$(WasmShellEnableAOT)'==''">false</WasmShellEnableAOT>

		<!-- 
		Force all applicable references to be present in the ReferenceCopyLocalPaths property.
		Otherwise, the ReferencePath property only contains reference assemblies if those are available.
		-->
		<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    
    <!-- 
      When using IISExpress with a standalone app, there's no point restarting IISExpress
      after build. It slows things unnecessarily and breaks in-flight HTTP requests.
    -->
    <NoRestartServerOnBuild>true</NoRestartServerOnBuild>

    <!-- Disable unwanted parts of the default publish process -->
    <CopyBuildOutputToPublishDirectory>false</CopyBuildOutputToPublishDirectory>
    <CopyOutputSymbolsToPublishDirectory>false</CopyOutputSymbolsToPublishDirectory>
    <PreserveCompilationContext>false</PreserveCompilationContext>
    <RazorCompileOnPublish>false</RazorCompileOnPublish>
    <GenerateDependencyFile>false</GenerateDependencyFile>
    <IsWebConfigTransformDisabled>true</IsWebConfigTransformDisabled>

    <UnoWasmPublishDistDir>$(AssemblyName)\dist\</UnoWasmPublishDistDir>

    <!-- Web Project Run Parameters -->
    <RunCommand>dotnet</RunCommand>
    <_unoCliLocation>unowasm</_unoCliLocation>
    <_unoCliLocation Condition="exists('$(MSBuildThisFileDirectory)../../Uno.Wasm.Bootstrap.Cli')">$(MSBuildThisFileDirectory)../../Uno.Wasm.Bootstrap.Cli/bin/$(Configuration)/netcoreapp2.1/dotnet-unowasm.dll</_unoCliLocation>
    <RunArguments>exec &quot;$(_unoCliLocation)&quot; serve --pathbase &quot;$(MSBuildProjectDirectory)\bin\$(Configuration)\$(TargetFramework)\dist&quot; --configuration $(Configuration) --targetframework $(TargetFramework) $(AdditionalRunArguments)</RunArguments>
  </PropertyGroup>

	<UsingTask AssemblyFile="$(WasmShellTasksPath)/Uno.Wasm.Bootstrap.v0.dll" TaskName="Uno.Wasm.Bootstrap.ShellTask_v0" />
	<UsingTask AssemblyFile="$(WasmShellTasksPath)/Uno.Wasm.Bootstrap.v0.dll" TaskName="Uno.Wasm.Bootstrap.UnoInstallSDKTask_v0" />

	<Target Name="_GenerateLinkerDescriptor" BeforeTargets="PrepareForBuild">
		<!-- 
		Use the LinkerDescriptor ItemGroup to generate 
		the proper linker description file name.
		-->

		<ItemGroup>
			<LinkerDescriptor Include="@(LinkerDescriptors)"></LinkerDescriptor>
		</ItemGroup>
		
		<Error Condition="'@(LinkerDescriptor->Count())' &gt; 1" Text="There cannot be multiple linker descriptor files." />
		
		<ItemGroup>
			<EmbeddedResource Include="@(LinkerDescriptor)">
				<LogicalName>$(AssemblyName).xml</LogicalName>
				<Visible>false</Visible>
			</EmbeddedResource>
		</ItemGroup>

		<Message Importance="low" Text="Descriptor @(EmbeddedResource)" />
	</Target>

	<Target Name="BuildDist" AfterTargets="AfterBuild">

		<ItemGroup>
			<!-- Filter ReferenceCopyLocalPaths as it may contain pdbs as well -->
			<_AssembliesForReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths)"
																						 Condition="'%(Extension)' == '.dll'" />
		</ItemGroup>

		<UnoInstallSDKTask_v0 
			MonoWasmSDKUri="$(MonoWasmSDKUri)"
			MonoWasmAOTSDKUri="$(MonoWasmAOTSDKUri)"
			IsOSUnixLike="$([MSBuild]::IsOsUnixLike())"
			MonoAOT="$(WasmShellEnableAOT)"
			PackagerOverrideFile="$(MSBuildThisFileDirectory)/packager.cs"
			MonoTempFolder="$(WasmShellMonoTempFolder)">
			<Output TaskParameter="SdkPath" PropertyName="_UnoMonoSdkPath" />
			<Output TaskParameter="PackagerBinPath" PropertyName="_UnoMonoPackagerBinPath" />
			<Output TaskParameter="PackagerProjectFile" PropertyName="_UnoMonoPackagerProjectFile" />
		</UnoInstallSDKTask_v0>

		<MSBuild Condition="'$(_UnoMonoPackagerProjectFile)'!=''" Projects="$(_UnoMonoPackagerProjectFile)" Targets="Restore;Build" />

		<ShellTask_v0
			Assembly="$(IntermediateOutputPath)$(TargetFileName)"
			OutputPath="$(OutputPath)"
			IntermediateOutputPath="$(ProjectDir)$(IntermediateOutputPath)"
			TargetFrameworkIdentifier="$(TargetFrameworkIdentifier)"
			MonoWasmSDKPath="$(_UnoMonoSdkPath)"
			PackagerBinPath="$(_UnoMonoPackagerBinPath)"
			PWAManifestFile="$(WasmPWAManifestFile)"
			IndexHtmlPath="$(WasmShellIndexHtmlPath)"
			RuntimeConfiguration="$(MonoWasmRuntimeConfiguration)"
			RuntimeDebuggerEnabled="$(MonoRuntimeDebuggerEnabled)"
      CustomDebuggerPath="$(MonoRuntimeCustomDebuggerPath)"
			MonoAOT="$(WasmShellEnableAOT)"
			MonoTempFolder="$(WasmShellMonoTempFolder)"
			Assets="@(Content)"
			ReferencePath="@(_AssembliesForReferenceCopyLocalPaths)" />
	</Target>

	<Target Name="_CleanDist" BeforeTargets="Clean">
		<ItemGroup>
			<_DistFilesToDelete Include="$(OutputPath)dist\**" />
		</ItemGroup>

		<Delete Files="@(_DistFilesToDelete)" />
	</Target>

  <Target Name="_UnoWasmGetCopyToPublishDirectory"
        BeforeTargets="GetCopyToPublishDirectoryItems"
        Condition="'$(OutputType.ToLowerInvariant())'=='exe'">
    <ItemGroup>
      <!-- Don't want to publish the assemblies from the regular 'bin' dir. Instead we publish ones from 'dist'. -->
      <ResolvedAssembliesToPublish Remove="@(ResolvedAssembliesToPublish)" />

      <!-- Move wwwroot files to output root -->
      <ContentWithTargetPath Update="@(ContentWithTargetPath)" Condition="$([System.String]::new(%(TargetPath)).StartsWith('wwwroot\')) OR $([System.String]::new(%(TargetPath)).StartsWith('wwwroot/'))">
        <TargetPath>$(UnoWasmPublishDistDir)$([System.String]::new(%(TargetPath)).Substring(8))</TargetPath>
      </ContentWithTargetPath>

      <_UnoWasmDistFiles Include="$(OutputPath)dist\**"/>
      <_UnoWasmDist Include="@(_UnoWasmDistFiles)">
        <TargetPath>$(UnoWasmPublishDistDir)$([MSBuild]::MakeRelative('$(TargetDir)dist\', %(Identity)))</TargetPath>
      </_UnoWasmDist>

      <ContentWithTargetPath Include="@(_UnoWasmDist)">
        <TargetPath>%(TargetPath)</TargetPath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ContentWithTargetPath>
    </ItemGroup>
  </Target>


</Project>